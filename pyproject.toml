[project]
name = "poetry-analysis"
dynamic = ["version"]
description = "Tool to parse and annotate Norwegian poetry."
authors = [
    {name = "Ingerid Dale", email = "ingerid.dale@nb.no"},
]
dependencies = [
    "nb-tokenizer",
    "pandas",
    "convert-pa"
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "CC-BY-4.0"}

[project.urls]
Repository = "https://github.com/norn-uio/poetry-analysis.git"
Issues = "https://github.com/norn-uio/poetry-analysis/issues"
Documentation = "https://norn-uio.github.io/poetry-analysis/"

[project.optional-dependencies]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.21",
    "mkdocstrings>=0.30.1",
    "mkdocstrings-python>=1.18.2",
    "pymdown-extensions>=10.16.1",
    "nbconvert>=7.16.6",
    "mkdocs-jupyter>=0.25.1",
    "jupytext",
]

[dependency-groups]
dev = [
    "pytest",
    "ruff",
    "mypy",
    "ipykernel",
    "pre-commit"
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.version]
source = "scm"

[tool.pytest.ini_options]
addopts = "--doctest-modules"

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["poetry_analysis"]

[tool.mypy]
files = ["poetry_analysis"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"



[tool.ruff]
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Use of `assert` detected
    "S101",
    # String contains ambiguous `â€“` (EN DASH)
    "RUF001",
    #Possible hardcoded password
    "S105",
    "S106",
]
